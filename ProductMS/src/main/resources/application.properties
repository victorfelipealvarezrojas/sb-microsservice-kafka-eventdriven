spring.application.name                     =   productms

server.port                                 =   0
spring.kafka.producer.bootstrap-servers     =   localhost:9092, localhost:9094
spring.kafka.producer.key-serializer        =   org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer      =   org.springframework.kafka.support.serializer.JsonSerializer
## acks = 0, 1, all (1 is default and is the lider in the cluster)
spring.kafka.producer.acks                  =   all
## retries = 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 (0 is default) - intentos de reenvio
## spring.kafka.producer.retries               =   10
## batch.size = 16384 (16KB) - lo enviara 10 veces (propiedad ...producer.retries) con un intervalo de 1 segundo
## spring.kafka.producer.properties.retry.backoff.ms = 1000

## max.in.flight.requests.per.connection = 5 (1 is default) - numero de mensajes que se pueden enviar sin esperar una respuesta
## es una alternativa a los 2 anteriores y tiene que ser mayor a los siguientes 2
 spring.kafka.producer.properties.delivery.timeout.ms = 31000

## buffer.memory = 33554432 (32MB) - tama√±o del buffer de mensajes
 spring.kafka.producer.properties.linger.ms  =   0

## max.block.ms = 60000 (60 segundos) - tiempo maximo que el cliente esperara para enviar un mensaje
 spring.kafka.producer.properties.timeout.ms =   30000

spring.kafka.producer.properties.request.timeout.ms = 30000

## idempotente producer - garantiza que los mensajes se envien una sola vez
## las propiedades que la desconfiguran son las siguientes 3 (acks, retries, max.in.flight.requests.per.connection) por eso se debensiempre configurar de forma explicita
spring.kafka.producer.properties.enable.idempotence     =   true
